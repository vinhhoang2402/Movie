Index: presentation/src/main/java/com/example/movie/ui/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.movie.ui.home\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.GridLayout\r\nimport android.widget.SearchView\r\nimport androidx.core.os.bundleOf\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.movie.R\r\nimport com.example.movie.databinding.FragmentHomeBinding\r\nimport com.example.movie.model.MovieData\r\nimport com.example.movie.ui.viewmodel.MovieViewModel\r\nimport com.example.movie.ui.viewmodel.MovieViewModelFactory\r\nimport io.reactivex.Observable\r\nimport kotlinx.android.synthetic.main.item_movie.*\r\nimport kotlinx.android.synthetic.main.shimmer_home_placeholder_layout.*\r\nimport java.util.*\r\n\r\nclass HomeFragment : Fragment() {\r\n    private lateinit var movieViewModel: MovieViewModel\r\n    private lateinit var binding: FragmentHomeBinding\r\n    private val list = mutableListOf<MovieData>()\r\n    ///////khkjhkj\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        val movieViewModelFactory = MovieViewModelFactory(requireContext())\r\n        movieViewModel = ViewModelProvider(requireActivity(), movieViewModelFactory)\r\n            .get(MovieViewModel::class.java)\r\n        retainInstance = true\r\n        Log.d(\"viewModelTest2\", movieViewModel.toString())\r\n    }\r\n\r\n    private val onClick: (MovieData) -> Unit = {\r\n        val bundle = bundleOf(\"movie\" to it)\r\n        Log.d(\"bbbbbbb\",it.vote_average.toString())\r\n        findNavController().navigate(R.id.action_homeFragment_to_detailFragment, bundle)\r\n    }\r\n\r\n    private fun initControls() {\r\n        val adapter: MovieAdapter = MovieAdapter(requireContext(), onClick)\r\n\r\n        binding.rvMovie.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.rvMovie.setHasFixedSize(true)\r\n        binding.rvMovie.adapter = adapter\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n        movieViewModel.movie.observe(viewLifecycleOwner, Observer {\r\n            list.clear()\r\n            list.addAll(it.movies)\r\n            adapter.set(it.movies)\r\n        })\r\n\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentHomeBinding.inflate(inflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        initControlsRating()\r\n        initControls()\r\n        onClick\r\n        searchMovie()\r\n    }\r\n\r\n    private fun initControlsRating() {\r\n        //rating\r\n        val adapterRating: MovieRatingAdapter = MovieRatingAdapter(requireContext(), onClick)\r\n        binding.rvPopular.layoutManager = LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false)\r\n        binding.rvPopular.setHasFixedSize(true)\r\n        binding.rvPopular.adapter = adapterRating\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n        movieViewModel.movieRating.observe(viewLifecycleOwner, Observer {\r\n            Log.d(\"ratingggggggg\",it.toString())\r\n            list.addAll(it.movies)\r\n            adapterRating.set(it.movies)\r\n        })\r\n    }\r\n\r\n    private fun searchMovie() {\r\n        binding.searchView.apply {\r\n            setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n                override fun onQueryTextSubmit(query: String?): Boolean {\r\n                    if (query.isNullOrEmpty()) {\r\n                        showSearchData(list)\r\n                    } else {\r\n                        showSearchData(getListDataSearch(query))\r\n                    }\r\n                    return true\r\n                }\r\n\r\n                override fun onQueryTextChange(query: String?): Boolean {\r\n                    if (query.isNullOrEmpty()) {\r\n                        showSearchData(list)\r\n                    } else {\r\n                        showSearchData(getListDataSearch(query))\r\n                    }\r\n                    return true\r\n                }\r\n            })\r\n            setOnClickListener {\r\n                isIconified = false\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showSearchData(listDataSearch: MutableList<MovieData>) {\r\n        val adapter: MovieAdapter = MovieAdapter(requireContext(), onClick)\r\n        binding.rvMovie.adapter = adapter\r\n        adapter.set(listDataSearch)\r\n    }\r\n\r\n    private fun getListDataSearch(query: String): MutableList<MovieData> {\r\n        val listFilter = list.filter {\r\n            it.title.contains(query, true)\r\n        }\r\n        Log.d(\"vvv\", listFilter.toString())\r\n        return listFilter.toMutableList()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n//        binding.ctShimmerHome.startShimmerAnimation()\r\n    }\r\n\r\n    override fun onPause() {\r\n       // binding.ctShimmerHome.stopShimmerAnimation()\r\n        super.onPause()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- presentation/src/main/java/com/example/movie/ui/home/HomeFragment.kt	(revision f93ea81f251b931a61db67bd2ba2bc7dbab456c5)
+++ presentation/src/main/java/com/example/movie/ui/home/HomeFragment.kt	(date 1609766184144)
@@ -28,7 +28,6 @@
     private lateinit var movieViewModel: MovieViewModel
     private lateinit var binding: FragmentHomeBinding
     private val list = mutableListOf<MovieData>()
-    ///////khkjhkj
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
